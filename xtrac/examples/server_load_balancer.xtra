import "standard_headers.xtrah";

// pre-filtering
Stage preFiltering {
	setFlowKey();

	State initial init {
		on(pktRcvd) {
			if (pktRcvd.port == 2, tcp.sport == 80, ipv4.src == "10.0.0.2") {
				setNextStage(forward);
			}

			if (pktRcvd.port == 2, tcp.sport == 80, ipv4.src == "10.0.0.3") {
				setNextStage(forward);
			}

			if (pktRcvd.port == 1, tcp.dport == 80, ipv4.dst == "10.0.0.1") {
				setNextStage(connection);
			}			
		}
	}
}


Stage connection {
	// Initialized to 0
	Register global incrementalCounter;

	setFlowKey(ipv4.src, tcp.sport);

	State initial init {
		on (pktRcvd){
			incrementalCounter = incrementalCounter + 1;
			setField(packet.metadata, 255, incrementalCounter);
			setTimer(1, 1, 2000000);
			setNextState(established);
			setNextStage(balancer);
		}
	}

	State established {
		on (pktRcvd){
			setNextStage(balancer); 
		}

		on (timeout) {
			setNextState(init);
		}
	}
}


Stage balancer {


	Register counter;
	setFlowKey(ipv4.src, tcp.sport);

	State initial init {
		on (pktRcvd){
			counter = packet.metadata;
			// Timer 20s
			setTimer(1, 1, 20000000);
			setNextState(established);
			setNextStage(forward);
		}
	}

	State established {
		on (pktRcvd){
			setField(packet.metadata, 255, counter);
			setNextStage(forward); 
		}
		
		on (timeout) {
			setNextState(init);
		}
	}

}

// Stage Stateless
Stage forward {
	setFlowKey();

	State initial init {
		on (pktRcvd){

			// Send to LAN
			if (pktRcvd.port == 1, packet.metadata == 0) {
				setField(ipv4.dst, 255, "10.0.0.2");
				// SendPacket(CURR_PKT, port)
				sendPacket(255, 2);
			}
			
			if (pktRcvd.port == 1, packet.metadata == 1) {
				setField(ipv4.dst, 255, "10.0.0.3");
				// SendPacket(CURR_PKT, port)
				sendPacket(255, 2);
			}

			// Send to INTERNET
			if (pktRcvd.port == 2, ipv4.src == "10.0.0.2") {
				setField(ipv4.src, 255, "10.0.0.1");
				// SendPacket(CURR_PKT, port)
				sendPacket(255, 1);
			}

			if (pktRcvd.port == 2, ipv4.src == "10.0.0.3") {
				setField(ipv4.src, 255, "10.0.0.1");
				// SendPacket(CURR_PKT, port)
				sendPacket(255, 1);
			}
		}
	}
}